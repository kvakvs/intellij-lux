{
  parserClass="se.clau.intellijlux.parser.LuxParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Lux"
  psiImplClassSuffix="Impl"
  psiPackage="se.clau.intellijlux.psi"
  psiImplPackage="se.clau.intellijlux.impl"
  psiImplUtilClass="se.clau.intellijlux.psi.impl.LuxPsiImplUtil"

  elementTypeHolderClass="se.clau.intellijlux.psi.LuxTypes"
  elementTypeClass="se.clau.intellijlux.psi.LuxElementType"
  tokenTypeClass="se.clau.intellijlux.psi.LuxTokenType"
  tokens=[
    T_BANG = "!"
    T_TILDE = "~"
    T_TRIPLE_QUESTION = "???"
    T_DOUBLE_QUESTION = "??"
    T_QUESTION_PLUS = "?+"
    T_QUESTION = "?"l
    T_MINUS = "-"
    T_PLUS = "+"
    T_AT = "@"
    T_SQR_OPEN = "["
    T_SQR_CLOSE = "]"
  ]
  generateTokenAccessors=true
}

lux_file ::= lux_file_item *

private lux_command ::=
    COMMENT | CRLF
    | meta_doc | K_END_DOC
    | meta_shell | meta_newshell
    | meta_timeout | meta_sleep
    | meta_config | meta_local | meta_global | meta_my
    | K_CLEANUP | meta_include
    | meta_invoke
    | meta_loop | K_END_LOOP
    | meta_progress
    | send | send_ln | expect_verbatim | expect_template | expect_regex
    | flush | expect_maybe_regex | set_failure | set_success | set_loop_break

private lux_file_item ::= meta_macro | lux_command

flush ::= K_FLUSH
ident ::= T_IDENT {
    mixin="se.clau.intellijlux.psi.impl.LuxNamedElementImpl"
    implements="se.clau.intellijlux.psi.LuxNamedElement"
    methods=[getName setName getNameIdentifier]
}

meta_doc ::= (K_DOC inner_line "]" ) | (K_DOC_ONLY multiline_text K_END_DOC)

meta_shell ::= K_SHELL_ONLY | (K_SHELL ident meta_contents)
meta_newshell ::= K_NEWSHELL_ONLY | (K_NEWSHELL meta_contents)
meta_timeout ::= K_TIMEOUT_ONLY | (K_TIMEOUT inner_number)
meta_sleep ::= K_SLEEP inner_number
meta_include ::= K_INCLUDE meta_contents

// Macro..Endmacro groups some Lux directives together and gives them a name
meta_macro ::= (K_MACRO ident) meta_contents
    lux_command *
    K_END_MACRO

meta_invoke ::= (K_INVOKE ident) meta_contents
meta_loop ::= (K_LOOP ident) meta_contents
meta_progress ::= K_PROGRESS meta_contents

private inner inner_number ::= T_NUMBER T_SQR_CLOSE CRLF
private inner meta_contents ::= ( meta_element * ) END_META
private meta_element ::= TEXT | paste

meta_config ::= K_CONFIG inner_x_equals_y
meta_local ::= K_LOCAL inner_x_equals_y
meta_global ::= K_GLOBAL inner_x_equals_y
meta_my ::= K_MY inner_x_equals_y

private inner inner_x_equals_y ::= ident T_EQUALS meta_contents

send ::= (K_SEND inner_line)
    | (K_ML_SEND inner_multiline T_TRIPLE_QUOTE)
send_ln ::= (K_SEND_LN inner_line)
    | (K_ML_SEND_LN inner_multiline T_TRIPLE_QUOTE)
expect_verbatim ::= (K_EXP_VERBATIM inner_line)
    | (K_ML_EXP_VERBATIM inner_multiline T_TRIPLE_QUOTE)
expect_template ::= (K_EXP_TEMPLATE inner_line)
    | (K_ML_EXP_TEMPLATE inner_multiline T_TRIPLE_QUOTE)
expect_regex ::= (K_EXP_REGEX inner_line)
    | (K_ML_EXP_REGEX inner_multiline T_TRIPLE_QUOTE)
expect_maybe_regex ::= (K_EXP_MAYBE_REGEX inner_line)
    | (K_ML_EXP_MAYBE_REGEX inner_multiline T_TRIPLE_QUOTE)
set_failure ::= K_SET_FAILURE_ONLY
    | (K_SET_FAILURE inner_line)
    | (K_ML_SET_FAILURE inner_multiline T_TRIPLE_QUOTE)
set_success ::= K_SET_SUCCESS_ONLY
    | (K_SET_SUCCESS inner_line)
    | (K_ML_SET_SUCCESS inner_multiline T_TRIPLE_QUOTE)
set_loop_break ::= K_SET_LOOP_BREAK_ONLY
    | (K_SET_LOOP_BREAK inner_line)
    | (K_ML_SET_LOOP_BREAK inner_multiline T_TRIPLE_QUOTE)

private inner inner_line ::= line_contents * CRLF

// LINE_CONTINUATION in line_contents for when it is broken with \\
private line_contents ::= TEXT | paste | LINE_CONTINUATION

private inner inner_multiline ::= multiline_contents *
private multiline_contents ::= TEXT | paste | CRLF

// Like multiline contents above but cannot contain pasted $VARIABLEs
private multiline_text ::= TEXT | CRLF

// A pasted value $name ${name} or $123
private paste ::= T_DOLLAR | T_PASTE_VARIABLE | T_PASTE_CAPTURE | T_PASTE_EXITCODE
