/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package se.clau.intellijlux;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import se.clau.intellijlux.psi.LuxTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>lux.flex</tt>
 */
class LuxLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_DOC = 2;
  public static final int IN_CONFIG = 4;
  public static final int IN_CONFIG_VAL = 6;
  public static final int IN_NEWSHELL = 8;
  public static final int IN_SHELL = 10;
  public static final int IN_INCLUDE = 12;
  public static final int IN_LOOP = 14;
  public static final int IN_MACRO = 16;
  public static final int IN_INVOKE = 18;
  public static final int IN_INVOKE_ARGS = 20;
  public static final int WAIT_NUM = 22;
  public static final int REMAINING_META = 24;
  public static final int REMAINING_LINE = 26;
  public static final int REMAINING_MULTILINE = 28;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3, 
     3,  3,  4,  4,  3,  3,  5,  5,  3,  3,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [11, 6, 4]
   * Total runtime size is 15232 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>10]<<6)|((ch>>4)&0x3f)]<<4)|(ch&0xf)];
  }

  /* The ZZ_CMAP_Z table has 1088 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\6\15\1\16\23\15"+
    "\1\17\1\15\1\20\1\21\12\15\1\22\10\12\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1"+
    "\32\1\33\1\34\1\35\1\36\2\12\1\15\1\37\3\12\1\40\10\12\1\41\1\42\5\15\1\43"+
    "\1\44\11\12\1\45\2\12\1\46\4\12\1\47\1\50\1\51\1\12\1\52\1\12\1\53\1\54\1"+
    "\55\3\12\51\15\1\56\3\15\1\57\1\60\4\15\1\61\12\12\1\62\u02c1\12\1\63\277"+
    "\12");

  /* The ZZ_CMAP_Y table has 3328 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\2\1\1\10\1\11\1\12\1\13\1\12\1\13\34\12\1"+
    "\14\1\15\1\16\1\1\7\12\1\17\1\20\1\12\1\21\4\12\1\22\10\12\1\21\12\12\1\23"+
    "\1\12\1\24\1\23\1\12\1\25\1\23\1\12\1\26\1\27\1\12\1\30\1\31\1\1\1\30\4\12"+
    "\1\32\6\12\1\33\1\34\1\35\1\1\3\12\1\36\6\12\1\15\3\12\1\37\2\12\1\40\1\1"+
    "\1\12\1\41\4\1\1\12\1\42\1\1\1\43\1\21\7\12\1\44\1\23\1\33\1\45\1\34\1\46"+
    "\1\47\1\50\1\44\1\15\1\51\1\45\1\34\1\52\1\53\1\54\1\55\1\56\1\57\1\21\1\34"+
    "\1\60\1\61\1\62\1\44\1\63\1\64\1\45\1\34\1\60\1\65\1\66\1\44\1\67\1\70\1\71"+
    "\1\72\1\32\1\73\1\74\1\55\1\1\1\75\1\76\1\34\1\77\1\100\1\101\1\44\1\1\1\75"+
    "\1\76\1\34\1\102\1\100\1\103\1\44\1\104\1\105\1\76\1\12\1\36\1\106\1\107\1"+
    "\44\1\110\1\111\1\112\1\12\1\113\1\114\1\115\1\55\1\116\1\23\2\12\1\30\1\117"+
    "\1\120\2\1\1\121\1\122\1\123\1\124\1\125\1\126\2\1\1\62\1\127\1\120\1\130"+
    "\1\131\1\12\1\132\1\23\1\133\1\131\1\12\1\132\1\134\3\1\4\12\1\120\4\12\1"+
    "\40\2\12\1\135\2\12\1\136\24\12\1\137\1\140\2\12\1\137\2\12\1\141\1\142\1"+
    "\13\3\12\1\142\3\12\1\36\2\1\1\12\1\1\5\12\1\143\1\23\45\12\1\35\1\12\1\23"+
    "\1\30\4\12\1\144\1\145\1\146\1\147\1\12\1\147\1\12\1\150\1\146\1\151\5\12"+
    "\1\152\1\120\1\1\1\153\1\120\5\12\1\25\2\12\1\30\4\12\1\56\1\12\1\117\2\41"+
    "\1\55\1\12\1\40\1\147\2\12\1\41\1\12\2\120\2\1\1\12\1\41\3\12\1\117\1\12\1"+
    "\35\2\120\1\154\1\117\4\1\4\12\1\41\1\120\1\155\1\150\7\12\1\150\3\12\1\25"+
    "\1\77\2\12\1\40\1\145\4\1\1\156\1\12\1\157\17\12\1\160\21\12\1\143\2\12\1"+
    "\143\1\161\1\12\1\40\3\12\1\162\1\163\1\164\1\132\1\163\3\1\1\165\1\62\1\166"+
    "\1\1\1\167\1\1\1\132\3\1\2\12\1\62\1\170\1\171\1\172\1\126\1\173\1\1\2\12"+
    "\1\145\62\1\1\55\2\12\1\120\161\1\2\12\1\117\2\12\1\117\10\12\1\174\1\150"+
    "\2\12\1\135\3\12\1\175\1\165\1\12\1\176\4\177\2\12\2\1\1\165\35\1\1\200\1"+
    "\1\1\23\1\201\1\23\4\12\1\202\1\23\4\12\1\136\1\203\1\12\1\40\1\23\4\12\1"+
    "\117\1\1\1\12\1\30\3\1\1\12\40\1\133\12\1\56\4\1\135\12\1\56\2\1\10\12\1\132"+
    "\4\1\2\12\1\40\20\12\1\132\1\12\1\41\1\1\3\12\1\204\7\12\1\15\1\1\1\205\1"+
    "\206\5\12\1\207\1\12\1\117\1\25\3\1\1\205\2\12\1\25\1\1\3\12\1\150\4\12\1"+
    "\56\1\120\1\12\1\210\2\12\1\40\2\12\1\150\1\12\1\132\4\12\1\211\1\120\1\12"+
    "\1\117\3\12\1\176\1\40\1\120\1\12\1\112\4\12\1\31\1\153\1\12\1\212\1\213\1"+
    "\214\1\177\2\12\1\136\1\56\7\12\1\215\1\120\72\12\1\150\1\12\1\216\2\12\1"+
    "\41\20\1\26\12\1\40\6\12\1\120\2\1\1\176\1\217\1\34\1\220\1\221\6\12\1\15"+
    "\1\1\1\222\25\12\1\40\1\1\4\12\1\206\2\12\1\25\2\1\1\41\1\12\1\1\1\12\1\223"+
    "\1\224\2\1\1\133\7\12\1\132\1\1\1\120\1\23\1\225\1\23\1\30\1\55\4\12\1\117"+
    "\1\226\1\227\2\1\1\230\1\12\1\13\1\231\2\40\2\1\7\12\1\30\4\1\3\12\1\147\7"+
    "\1\1\232\10\1\1\12\1\132\3\12\2\62\1\1\2\12\1\1\1\12\1\30\2\12\1\30\1\12\1"+
    "\40\2\12\1\233\1\234\2\1\11\12\1\40\1\120\2\12\1\233\1\12\1\41\2\12\1\25\3"+
    "\12\1\150\11\1\23\12\1\176\1\12\1\56\1\25\11\1\1\235\2\12\1\236\1\12\1\56"+
    "\1\12\1\176\1\12\1\117\4\1\1\12\1\237\1\12\1\56\1\12\1\120\4\1\3\12\1\240"+
    "\4\1\1\241\1\242\1\12\1\243\2\1\1\12\1\132\1\12\1\132\2\1\1\131\1\12\1\176"+
    "\1\1\3\12\1\56\1\12\1\56\1\12\1\31\1\12\1\15\6\1\4\12\1\145\3\1\3\12\1\31"+
    "\3\12\1\31\60\1\4\12\1\176\1\1\1\55\1\165\3\12\1\30\1\1\1\12\1\145\1\120\3"+
    "\12\1\133\1\1\2\12\1\244\4\12\1\245\1\246\2\1\1\12\1\21\1\12\1\247\4\1\1\250"+
    "\1\26\1\145\3\12\1\30\1\120\1\33\1\45\1\34\1\60\1\65\1\251\1\252\1\147\10"+
    "\1\4\12\1\30\1\120\2\1\4\12\1\253\1\120\12\1\3\12\1\254\1\62\1\255\2\1\4\12"+
    "\1\256\1\120\2\1\3\12\1\25\1\120\3\1\1\12\1\77\1\41\1\120\26\1\4\12\1\120"+
    "\1\165\34\1\3\12\1\145\20\1\1\34\2\12\1\13\1\62\1\120\1\1\1\206\1\12\1\206"+
    "\1\131\1\176\64\1\71\12\1\120\6\1\6\12\1\117\1\1\14\12\1\150\53\1\2\12\1\117"+
    "\75\1\44\12\1\176\33\1\43\12\1\145\1\12\1\117\1\120\6\1\1\12\1\40\1\147\3"+
    "\12\1\176\1\150\1\120\1\222\1\257\1\12\67\1\4\12\1\147\2\12\1\117\1\165\1"+
    "\12\4\1\1\62\1\1\76\12\1\132\1\1\57\12\1\31\20\1\1\15\77\1\6\12\1\30\1\132"+
    "\1\145\1\260\114\1\1\261\1\262\1\263\1\1\1\264\11\1\1\265\33\1\5\12\1\133"+
    "\3\12\1\146\1\266\1\267\1\270\3\12\1\271\1\272\1\12\1\273\1\274\1\76\24\12"+
    "\1\254\1\12\1\76\1\136\1\12\1\136\1\12\1\133\1\12\1\133\1\117\1\12\1\117\1"+
    "\12\1\34\1\12\1\34\1\12\1\275\3\12\40\1\3\12\1\216\2\12\1\132\1\276\1\166"+
    "\1\155\1\23\25\1\1\13\1\207\1\277\75\1\14\12\1\147\1\176\2\1\4\12\1\30\1\120"+
    "\112\1\1\270\1\12\1\300\1\301\1\302\1\303\1\304\1\305\1\306\1\41\1\307\1\41"+
    "\47\1\1\12\1\120\1\12\1\120\1\12\1\120\47\1\55\12\1\176\2\1\103\12\1\147\15"+
    "\12\1\40\150\12\1\15\25\1\41\12\1\40\56\1\17\12\41\1");

  /* The ZZ_CMAP_A table has 3200 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\1\0\1\2\1\1\22\0\1\2\1\10\1\7\1\3\7\0\1\13\1\0\1\14\2\0\12\6"+
    "\3\0\1\41\1\0\1\12\1\15\32\5\1\16\1\0\1\4\1\0\1\5\1\0\1\22\1\37\1\17\1\26"+
    "\1\21\1\35\1\36\1\44\1\32\1\5\1\34\1\20\1\30\1\23\1\27\1\25\1\5\1\31\1\43"+
    "\1\45\1\24\1\33\1\42\1\5\1\40\1\5\3\0\1\11\13\0\1\5\12\0\1\5\4\0\1\5\5\0\27"+
    "\5\1\0\12\5\4\0\14\5\16\0\5\5\7\0\1\5\1\0\1\5\1\0\5\5\1\0\2\5\2\0\4\5\1\0"+
    "\1\5\6\0\1\5\1\0\3\5\1\0\1\5\1\0\4\5\1\0\23\5\1\0\11\5\1\0\26\5\2\0\1\5\6"+
    "\0\10\5\10\0\16\5\1\0\1\5\1\0\2\5\1\0\2\5\1\0\1\5\10\0\13\5\5\0\3\5\15\0\12"+
    "\5\4\0\6\5\1\0\10\5\2\0\12\5\1\0\23\5\2\0\14\5\2\0\11\5\4\0\1\5\5\0\16\5\2"+
    "\0\14\5\4\0\5\5\1\0\10\5\6\0\20\5\2\0\13\5\2\0\16\5\1\0\1\5\3\0\4\5\2\0\11"+
    "\5\2\0\2\5\2\0\4\5\10\0\1\5\4\0\2\5\1\0\1\5\1\0\3\5\1\0\6\5\4\0\2\5\1\0\2"+
    "\5\1\0\2\5\1\0\2\5\2\0\1\5\1\0\5\5\4\0\2\5\2\0\3\5\3\0\1\5\7\0\4\5\1\0\1\5"+
    "\7\0\20\5\13\0\3\5\1\0\11\5\1\0\2\5\1\0\2\5\1\0\5\5\2\0\12\5\1\0\3\5\1\0\3"+
    "\5\2\0\1\5\30\0\1\5\7\0\3\5\1\0\10\5\2\0\6\5\2\0\2\5\2\0\3\5\10\0\2\5\4\0"+
    "\2\5\1\0\1\5\1\0\1\5\20\0\2\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0\1\5\1\0"+
    "\2\5\3\0\2\5\3\0\3\5\3\0\5\5\3\0\3\5\1\0\4\5\2\0\1\5\6\0\1\5\10\0\4\5\1\0"+
    "\10\5\1\0\3\5\1\0\30\5\3\0\10\5\1\0\3\5\1\0\4\5\7\0\2\5\1\0\3\5\5\0\4\5\1"+
    "\0\5\5\2\0\4\5\5\0\2\5\7\0\1\5\2\0\2\5\16\0\3\5\1\0\10\5\1\0\7\5\1\0\3\5\1"+
    "\0\5\5\5\0\4\5\7\0\1\5\12\0\6\5\2\0\2\5\1\0\22\5\3\0\10\5\1\0\11\5\1\0\1\5"+
    "\2\0\7\5\3\0\1\5\4\0\6\5\1\0\1\5\1\0\10\5\2\0\2\5\14\0\17\5\1\0\12\5\7\0\2"+
    "\5\1\0\1\5\2\0\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0\7\5\1\0\3\5\1\0\1\5\1\0\1\5"+
    "\2\0\2\5\1\0\15\5\1\0\3\5\2\0\5\5\1\0\1\5\1\0\6\5\2\0\12\5\2\0\4\5\10\0\2"+
    "\5\13\0\1\5\1\0\1\5\1\0\1\5\4\0\12\5\1\0\24\5\3\0\5\5\1\0\12\5\6\0\1\5\11"+
    "\0\6\5\1\0\1\5\5\0\1\5\2\0\13\5\1\0\15\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2"+
    "\0\1\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0\16\5\2\0\6\5\2\0\13\5\3\0\13\5"+
    "\7\0\15\5\1\0\7\5\13\0\4\5\14\0\1\5\1\0\2\5\14\0\4\5\3\0\1\5\4\0\2\5\15\0"+
    "\3\5\11\0\1\5\23\0\10\5\1\0\23\5\1\0\2\5\6\0\6\5\5\0\15\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\6\5\1\0\7\5\1\0\1\5\3\0\3\5\1\0\7\5\3\0\4\5\2\0\6\5\23\0\1\5"+
    "\4\0\1\5\14\0\1\5\15\0\1\5\2\0\1\5\4\0\1\5\2\0\12\5\1\0\1\5\3\0\5\5\6\0\1"+
    "\5\1\0\1\5\1\0\1\5\1\0\4\5\1\0\1\5\5\0\5\5\4\0\1\5\1\0\5\5\6\0\15\5\7\0\10"+
    "\5\11\0\7\5\1\0\7\5\6\0\3\5\11\0\5\5\2\0\5\5\3\0\7\5\2\0\2\5\2\0\3\5\5\0\16"+
    "\5\1\0\12\5\1\0\1\5\7\0\11\5\2\0\27\5\2\0\15\5\3\0\1\5\1\0\1\5\2\0\1\5\16"+
    "\0\1\5\2\0\5\5\12\0\6\5\2\0\6\5\2\0\6\5\11\0\13\5\1\0\2\5\2\0\7\5\4\0\5\5"+
    "\3\0\5\5\5\0\12\5\1\0\5\5\1\0\1\5\1\0\2\5\1\0\2\5\1\0\12\5\3\0\15\5\3\0\2"+
    "\5\30\0\16\5\4\0\1\5\2\0\6\5\2\0\6\5\2\0\6\5\2\0\3\5\3\0\14\5\1\0\16\5\1\0"+
    "\2\5\1\0\1\5\15\0\1\5\2\0\4\5\4\0\10\5\1\0\5\5\12\0\6\5\2\0\1\5\1\0\14\5\1"+
    "\0\2\5\3\0\1\5\2\0\4\5\1\0\2\5\12\0\10\5\6\0\6\5\1\0\2\5\5\0\10\5\1\0\3\5"+
    "\1\0\13\5\4\0\3\5\4\0\5\5\2\0\1\5\11\0\5\5\5\0\3\5\3\0\13\5\1\0\1\5\3\0\10"+
    "\5\6\0\1\5\1\0\7\5\1\0\1\5\1\0\4\5\1\0\2\5\6\0\1\5\5\0\7\5\2\0\7\5\3\0\6\5"+
    "\1\0\1\5\10\0\6\5\2\0\10\5\10\0\6\5\2\0\1\5\3\0\1\5\13\0\10\5\5\0\15\5\3\0"+
    "\2\5\6\0\5\5\3\0\6\5\10\0\10\5\2\0\7\5\16\0\4\5\4\0\3\5\15\0\1\5\2\0\2\5\2"+
    "\0\4\5\1\0\14\5\1\0\1\5\1\0\7\5\1\0\21\5\1\0\4\5\2\0\10\5\1\0\7\5\1\0\14\5"+
    "\1\0\4\5\1\0\5\5\1\0\1\5\3\0\11\5\1\0\10\5\2\0\2\5\5\0\1\5\12\0\2\5\1\0\2"+
    "\5\1\0\5\5\6\0\2\5\1\0\1\5\2\0\1\5\1\0\12\5\1\0\4\5\1\0\1\5\1\0\1\5\6\0\1"+
    "\5\4\0\1\5\1\0\1\5\1\0\1\5\1\0\3\5\1\0\2\5\1\0\1\5\2\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\2\5\1\0\1\5\2\0\4\5\1\0\7\5\1\0\4\5\1\0\4\5\1\0\1\5\1"+
    "\0\12\5\1\0\5\5\1\0\3\5\1\0\5\5\1\0\5\5");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\1\1\14\1\15"+
    "\2\1\1\16\1\17\3\1\1\0\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\14\0\1\26\1\0\1\27\4\0"+
    "\1\30\16\0\1\31\1\32\1\33\10\0\1\34\6\0"+
    "\1\35\1\0\1\36\1\37\10\0\1\40\11\0\1\41"+
    "\3\0\1\42\4\0\1\43\11\0\1\44\4\0\1\45"+
    "\3\0\1\46\1\47\3\0\1\50\5\0\1\51\1\52"+
    "\1\53\3\0\1\54\2\0\1\55\1\56\1\0\1\57"+
    "\1\60\1\0\1\61\1\0\1\62\1\63\1\64";

  private static int [] zzUnpackAction() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\46\0\114\0\162\0\230\0\276\0\344\0\u010a"+
    "\0\u0130\0\u0156\0\u017c\0\u01a2\0\u0130\0\u01c8\0\u0130\0\u0130"+
    "\0\u01ee\0\u0214\0\u023a\0\u0260\0\u0286\0\u02ac\0\u0130\0\u02d2"+
    "\0\u02f8\0\u031e\0\u0344\0\u036a\0\u0390\0\u03b6\0\u03dc\0\u0130"+
    "\0\u0402\0\u0130\0\u0130\0\u0130\0\u0130\0\u0428\0\u044e\0\u0474"+
    "\0\u049a\0\u04c0\0\u04e6\0\u050c\0\u0532\0\u0558\0\u057e\0\u02d2"+
    "\0\u02f8\0\u0130\0\u036a\0\u0130\0\u0390\0\u03b6\0\u05a4\0\u05ca"+
    "\0\u0130\0\u05f0\0\u0616\0\u063c\0\u0662\0\u0688\0\u06ae\0\u06d4"+
    "\0\u06fa\0\u0720\0\u0746\0\u076c\0\u0792\0\u07b8\0\u07de\0\u0130"+
    "\0\u0130\0\u0804\0\u082a\0\u0850\0\u0876\0\u089c\0\u08c2\0\u08e8"+
    "\0\u090e\0\u0934\0\u0130\0\u095a\0\u0980\0\u09a6\0\u09cc\0\u09f2"+
    "\0\u0a18\0\u0130\0\u0a3e\0\u0a64\0\u0130\0\u0a8a\0\u0ab0\0\u0ad6"+
    "\0\u0afc\0\u0b22\0\u0b48\0\u0b6e\0\u0b94\0\u0130\0\u0bba\0\u0be0"+
    "\0\u0c06\0\u0c2c\0\u0c52\0\u0c78\0\u0c9e\0\u0cc4\0\u0cea\0\u0130"+
    "\0\u0d10\0\u0d36\0\u0d5c\0\u0130\0\u0d82\0\u0da8\0\u0dce\0\u0df4"+
    "\0\u0130\0\u0e1a\0\u0e40\0\u0e66\0\u0e8c\0\u0eb2\0\u0ed8\0\u0efe"+
    "\0\u0f24\0\u0f4a\0\u0130\0\u0f70\0\u0f96\0\u0fbc\0\u0fe2\0\u0130"+
    "\0\u1008\0\u102e\0\u1054\0\u0130\0\u0130\0\u107a\0\u10a0\0\u10c6"+
    "\0\u0130\0\u10ec\0\u1112\0\u1138\0\u115e\0\u1184\0\u0130\0\u0130"+
    "\0\u0130\0\u11aa\0\u11d0\0\u11f6\0\u0130\0\u121c\0\u1242\0\u0130"+
    "\0\u0130\0\u1268\0\u0130\0\u0130\0\u128e\0\u0130\0\u12b4\0\u0130"+
    "\0\u0130\0\u0130";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\14\1\15\2\11\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\102\11\2\26"+
    "\10\11\22\26\1\27\4\26\4\30\1\31\41\30\5\11"+
    "\2\32\10\11\22\32\1\11\4\32\6\11\1\33\37\11"+
    "\1\34\1\11\44\34\7\35\1\36\36\35\47\0\1\12"+
    "\46\0\1\13\43\0\1\14\1\0\44\14\7\0\1\37"+
    "\37\0\1\40\10\0\1\41\1\42\33\0\1\43\45\0"+
    "\1\44\45\0\1\45\63\0\1\46\1\47\1\50\1\0"+
    "\1\51\2\0\1\52\1\0\1\53\1\0\1\54\3\0"+
    "\1\55\4\0\1\56\1\0\1\57\5\0\2\26\10\0"+
    "\22\26\1\0\4\26\4\60\1\61\41\60\1\0\1\62"+
    "\51\0\2\32\10\0\22\32\1\0\4\32\6\0\1\33"+
    "\37\0\1\63\1\64\44\63\7\65\1\66\45\65\1\67"+
    "\36\65\7\0\1\70\50\0\1\71\53\0\1\72\6\0"+
    "\1\73\45\0\1\74\41\0\1\75\43\0\1\76\53\0"+
    "\1\77\40\0\1\100\15\0\1\101\30\0\1\102\42\0"+
    "\1\103\45\0\1\104\23\0\1\105\33\0\1\106\13\0"+
    "\7\65\1\107\36\65\10\0\1\110\1\111\1\112\54\0"+
    "\1\113\47\0\1\114\41\0\1\115\7\0\1\116\44\0"+
    "\1\117\61\0\1\120\22\0\1\121\45\0\1\122\30\0"+
    "\1\123\62\0\1\124\13\0\1\125\41\0\1\126\37\0"+
    "\1\127\45\0\1\130\54\0\1\131\16\0\1\132\5\0"+
    "\1\133\50\0\1\134\1\135\54\0\1\136\60\0\1\137"+
    "\32\0\1\140\50\0\1\141\40\0\1\142\5\0\1\143"+
    "\1\0\1\144\60\0\1\145\4\0\1\146\1\0\1\147"+
    "\72\0\1\150\34\0\1\151\54\0\1\152\55\0\1\153"+
    "\27\0\1\154\44\0\1\155\46\0\1\156\25\0\1\132"+
    "\5\0\1\157\50\0\1\160\56\0\1\161\54\0\1\162"+
    "\33\0\1\163\27\0\1\164\72\0\1\165\45\0\1\166"+
    "\40\0\1\167\67\0\1\170\2\0\1\171\73\0\1\172"+
    "\42\0\1\173\55\0\1\174\33\0\1\175\50\0\1\176"+
    "\40\0\1\177\54\0\1\200\17\0\1\132\70\0\1\201"+
    "\57\0\1\202\11\0\1\203\72\0\1\204\35\0\1\205"+
    "\45\0\1\206\47\0\1\207\26\0\1\210\71\0\1\211"+
    "\40\0\1\212\44\0\1\213\27\0\1\214\45\0\1\215"+
    "\1\0\1\216\65\0\1\217\46\0\1\220\22\0\1\221"+
    "\70\0\1\222\24\0\1\223\72\0\1\224\34\0\1\225"+
    "\46\0\1\226\26\0\1\227\45\0\1\230\44\0\1\231"+
    "\111\0\1\232\4\0\1\233\45\0\1\234\42\0\1\235"+
    "\73\0\1\236\36\0\1\237\27\0\1\240\45\0\1\241"+
    "\1\0\1\242\42\0\1\243\45\0\1\244\50\0\1\245"+
    "\43\0\1\246\1\0\1\247\42\0\1\250\45\0\1\251"+
    "\45\0\1\252\44\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4826];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\3\1\1\11\1\1\2\11\6\1\1\11"+
    "\7\1\1\0\1\11\1\1\4\11\14\0\1\11\1\0"+
    "\1\11\4\0\1\11\16\0\2\11\1\1\10\0\1\11"+
    "\6\0\1\11\1\0\1\1\1\11\10\0\1\11\11\0"+
    "\1\11\3\0\1\11\4\0\1\11\11\0\1\11\4\0"+
    "\1\11\3\0\2\11\3\0\1\11\5\0\3\11\3\0"+
    "\1\11\2\0\2\11\1\0\2\11\1\0\1\11\1\0"+
    "\3\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[170];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LuxLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            } 
            // fall through
          case 53: break;
          case 2: 
            { return LuxTypes.CRLF;
            } 
            // fall through
          case 54: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            } 
            // fall through
          case 55: break;
          case 4: 
            { return LuxTypes.COMMENT;
            } 
            // fall through
          case 56: break;
          case 5: 
            { return LuxTypes.T_SQR_CLOSE;
            } 
            // fall through
          case 57: break;
          case 6: 
            { yybegin(REMAINING_LINE); return LuxTypes.K_SEND;
            } 
            // fall through
          case 58: break;
          case 7: 
            { yybegin(REMAINING_LINE); return LuxTypes.K_SEND_LN;
            } 
            // fall through
          case 59: break;
          case 8: 
            { yybegin(REMAINING_LINE); return LuxTypes.K_EXP_REGEX;
            } 
            // fall through
          case 60: break;
          case 9: 
            { yybegin(REMAINING_LINE); return LuxTypes.K_SET_SUCCESS;
            } 
            // fall through
          case 61: break;
          case 10: 
            { yybegin(REMAINING_LINE); return LuxTypes.K_SET_FAILURE;
            } 
            // fall through
          case 62: break;
          case 11: 
            { yybegin(REMAINING_LINE); return LuxTypes.K_SET_LOOP_BREAK;
            } 
            // fall through
          case 63: break;
          case 12: 
            { return LuxTypes.T_WORD;
            } 
            // fall through
          case 64: break;
          case 13: 
            { yybegin(IN_CONFIG_VAL); return LuxTypes.T_EQUALS;
            } 
            // fall through
          case 65: break;
          case 14: 
            { yybegin(IN_INVOKE_ARGS); return LuxTypes.T_WORD;
            } 
            // fall through
          case 66: break;
          case 15: 
            { yybegin(YYINITIAL); return LuxTypes.T_NUMBER;
            } 
            // fall through
          case 67: break;
          case 16: 
            { return LuxTypes.K_FLUSH;
            } 
            // fall through
          case 68: break;
          case 17: 
            { yybegin(REMAINING_LINE); return LuxTypes.K_EXP_TEMPLATE;
            } 
            // fall through
          case 69: break;
          case 18: 
            { yybegin(REMAINING_LINE); return LuxTypes.K_EXP_MAYBE_REGEX;
            } 
            // fall through
          case 70: break;
          case 19: 
            { return LuxTypes.K_SET_SUCCESS_ONLY;
            } 
            // fall through
          case 71: break;
          case 20: 
            { return LuxTypes.K_SET_FAILURE_ONLY;
            } 
            // fall through
          case 72: break;
          case 21: 
            { return LuxTypes.K_SET_LOOP_BREAK_ONLY;
            } 
            // fall through
          case 73: break;
          case 22: 
            { yybegin(YYINITIAL); return LuxTypes.T_META_CONTENTS;
            } 
            // fall through
          case 74: break;
          case 23: 
            { yybegin(YYINITIAL); return LuxTypes.T_LINE_CONTENTS;
            } 
            // fall through
          case 75: break;
          case 24: 
            { yybegin(REMAINING_LINE); return LuxTypes.K_EXP_VERBATIM;
            } 
            // fall through
          case 76: break;
          case 25: 
            { yybegin(REMAINING_MULTILINE); return LuxTypes.K_ML_SEND;
            } 
            // fall through
          case 77: break;
          case 26: 
            { yybegin(REMAINING_MULTILINE); return LuxTypes.K_ML_SEND_LN;
            } 
            // fall through
          case 78: break;
          case 27: 
            { yybegin(REMAINING_MULTILINE); return LuxTypes.K_ML_EXP_REGEX;
            } 
            // fall through
          case 79: break;
          case 28: 
            { yybegin(IN_CONFIG); return LuxTypes.K_MY;
            } 
            // fall through
          case 80: break;
          case 29: 
            { yybegin(YYINITIAL); return LuxTypes.T_MULTILINE_CONTENTS;
            } 
            // fall through
          case 81: break;
          case 30: 
            { yybegin(REMAINING_MULTILINE); return LuxTypes.K_ML_EXP_TEMPLATE;
            } 
            // fall through
          case 82: break;
          case 31: 
            { yybegin(REMAINING_MULTILINE); return LuxTypes.K_ML_EXP_MAYBE_REGEX;
            } 
            // fall through
          case 83: break;
          case 32: 
            { yybegin(REMAINING_META); return LuxTypes.K_DOC;
            } 
            // fall through
          case 84: break;
          case 33: 
            { yybegin(REMAINING_MULTILINE); return LuxTypes.K_ML_EXP_VERBATIM;
            } 
            // fall through
          case 85: break;
          case 34: 
            { yybegin(IN_LOOP); return LuxTypes.K_LOOP;
            } 
            // fall through
          case 86: break;
          case 35: 
            { return LuxTypes.K_DOC_ONLY;
            } 
            // fall through
          case 87: break;
          case 36: 
            { yybegin(IN_CONFIG); return LuxTypes.K_LOCAL;
            } 
            // fall through
          case 88: break;
          case 37: 
            { yybegin(IN_MACRO); return LuxTypes.K_MACRO;
            } 
            // fall through
          case 89: break;
          case 38: 
            { yybegin(WAIT_NUM); return LuxTypes.K_SLEEP;
            } 
            // fall through
          case 90: break;
          case 39: 
            { yybegin(IN_SHELL); return LuxTypes.K_SHELL;
            } 
            // fall through
          case 91: break;
          case 40: 
            { yybegin(IN_CONFIG); return LuxTypes.K_CONFIG;
            } 
            // fall through
          case 92: break;
          case 41: 
            { yybegin(IN_INVOKE); return LuxTypes.K_INVOKE;
            } 
            // fall through
          case 93: break;
          case 42: 
            { yybegin(IN_CONFIG); return LuxTypes.K_GLOBAL;
            } 
            // fall through
          case 94: break;
          case 43: 
            { return LuxTypes.K_SHELL_ONLY;
            } 
            // fall through
          case 95: break;
          case 44: 
            { return LuxTypes.K_END_DOC;
            } 
            // fall through
          case 96: break;
          case 45: 
            { yybegin(IN_INCLUDE); return LuxTypes.K_INCLUDE;
            } 
            // fall through
          case 97: break;
          case 46: 
            { yybegin(WAIT_NUM); return LuxTypes.K_TIMEOUT;
            } 
            // fall through
          case 98: break;
          case 47: 
            { return LuxTypes.K_CLEANUP;
            } 
            // fall through
          case 99: break;
          case 48: 
            { return LuxTypes.K_END_LOOP;
            } 
            // fall through
          case 100: break;
          case 49: 
            { yybegin(IN_NEWSHELL); return LuxTypes.K_NEWSHELL;
            } 
            // fall through
          case 101: break;
          case 50: 
            { return LuxTypes.K_TIMEOUT_ONLY;
            } 
            // fall through
          case 102: break;
          case 51: 
            { return LuxTypes.K_END_MACRO;
            } 
            // fall through
          case 103: break;
          case 52: 
            { return LuxTypes.K_NEWSHELL_ONLY;
            } 
            // fall through
          case 104: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
